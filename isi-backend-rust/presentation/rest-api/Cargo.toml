[package]
name = "rest-api"
version = "0.1.0"
edition = "2024"

[[bin]]
name = "rest-api"
path = "src/main.rs"

[dependencies]
# web framrwork
axum = { version = "0.8.3", features = ["macros"] }
axum-extra = { version = "0.10.1", features = ["typed-header"] }
# Chrono: Biblioteca de fecha y hora para Rust
chrono = { version = "0.4", features = ["serde"] }
# Serde: framework para serializar y deserializar
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0.140"
# UUID: Una biblioteca para generar identificadores universalmente únicos
uuid = { version = "1.16.0", features = ["v4", "serde"] }
# ThisError: Manejo de errores con facilidad
thiserror = "2.0.12"
#https://docs.rs/anyhow/latest/anyhow/
anyhow = "1.0.98"
# SQLx is an async, pure Rust SQL crate featuring compile-time checked queries without a DSL
sqlx = { version = "0.8.3", features = [
    "runtime-tokio-rustls",
    "postgres",
    "uuid",
    "chrono",
    "uuid",
    "macros",
    "derive",
    "migrate",
    "json",
] }
# Dotenv: Carga las variables de entorno de un archivo `.env`
dotenvy = "0.15.7"
# Tokio - Un tiempo de ejecución de Rust asíncrono: https://tokio.rs/
tokio = { version = "1.44.1", features = ["full"] }
# Tower: Un marco de trabajo para construir aplicaciones asíncronas y distribuidas
tower = { version = "0.5.2", features = ["timeout"] }
tower-http = { version = "0.6.2", features = ["cors", "trace", "fs"] }
# tracing: Un sistema de diagnóstico y registro estructurado de alcance y estructurado
tracing = "0.1.40"
tracing-subscriber = { version = "0.3.18", features = ["env-filter"] }
# Http Body Util: Utilidades para trabajar con bodies de una petición HTTP
http-body-util = "0.1.3"
# OpenAPI dependencies
utoipa = { version = "5.3.1", features = ["axum_extras", "uuid"] }
utoipa-swagger-ui = { version = "9.0.1", features = ["axum"] }

business = { path = "../../business" }
persistance = { path = "../../infrastructure/persistance" }
ai = { path = "../../infrastructure/ai" }

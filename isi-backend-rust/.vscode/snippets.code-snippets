{
    /**
    * Business Logic Snippets
    */
    "Business Lib Domain Entity": {
        "prefix": "lib-domain-entity",
        "body": [
            "pub mod ${1:module_name} {",
            "\tpub mod errors;",
            "\tpub mod model;",
            "\tpub mod repository;",
            "\tpub mod use_cases;",
            "${2:// pub mod value_objets; // incluir si aplica}",
            "}"
        ],
        "description": "Crea un bloque pub mod para un nuevo módulo de dominio, (business/lib.rs -> mod domain)"
    },
    "Business Lib Application Entity": {
        "prefix": "lib-application-entity",
        "body": [
            "pub mod ${1:module_name} {",
            "\tpub mod service;",
            "}"
        ],
        "description": "Crea un bloque pub mod para un nuevo módulo de aplicación (business/lib.rs -> mod application)"
    },
    "Business Domain Model": {
        "prefix": "business-domain-model",
        "body": [
            "// === Bloque de derive (elige según tu caso) ===",
            "// #[derive(Debug)]                       // Para imprimir en consola (útil en desarrollo)",
            "// #[derive(Clone)]                      // Para clonar structs fácilmente",
            "// #[derive(Serialize, Deserialize)]     // Para convertir desde/hacia JSON u otros formatos",
            "// #[derive(PartialEq, Eq, Hash)]        // Para comparar, o usar en HashMaps o HashSets",
            "// #[derive(Default)]                    // Para construir una instancia vacía si aplica",
            "",
            "use chrono::NaiveDateTime;",
            "use serde::{Deserialize, Serialize};",
            "use uuid::Uuid;",
            "",
            "/// Trait para entidades con identificador y timestamps",
            "pub trait Identifiable {",
            "    fn id(&self) -> Uuid;",
            "    fn created_at(&self) -> NaiveDateTime;",
            "    fn updated_at(&self) -> NaiveDateTime;",
            "}",
            "",
            "#[derive(Debug, Clone, Deserialize, Serialize)]",
            "pub struct ${1:EntityName} {",
            "    id: Uuid,",
            "    created_at: NaiveDateTime,",
            "    updated_at: NaiveDateTime,",
            "    ${2:// campo personalizado}",
            "}",
            "",
            "impl ${1:EntityName} {",
            "    pub fn new(${3:}) -> Result<Self, String> {",
            "        // Validaciones",
            "        ${4:// if ... return Err(...) }",
            "        Ok(Self {",
            "            id: Uuid::new_v4(),",
            "            created_at: chrono::Utc::now().naive_utc(),",
            "            updated_at: chrono::Utc::now().naive_utc(),",
            "            ${5:// campos personalizados}",
            "        })",
            "    }",
            "",
            "    pub fn from_repository(",
            "        id: Uuid,",
            "        created_at: NaiveDateTime,",
            "        updated_at: NaiveDateTime,",
            "        ${6:/* campos personalizados */}",
            "    ) -> Self {",
            "        Self {",
            "            id,",
            "            created_at,",
            "            updated_at,",
            "            ${7:// campos personalizados}",
            "        }",
            "    }",
            "",
            "    pub fn id(&self) -> Uuid {",
            "        self.id",
            "    }",
            "",
            "    pub fn created_at(&self) -> NaiveDateTime {",
            "        self.created_at",
            "    }",
            "",
            "    pub fn updated_at(&self) -> NaiveDateTime {",
            "        self.updated_at",
            "    }",
            "",
            "    ${8:// otros getters}",
            "}",
            "",
            "impl Identifiable for ${1:EntityName} {",
            "    fn id(&self) -> Uuid {",
            "        self.id",
            "    }",
            "    fn created_at(&self) -> NaiveDateTime {",
            "        self.created_at",
            "    }",
            "    fn updated_at(&self) -> NaiveDateTime {",
            "        self.updated_at",
            "    }",
            "}"
        ],
        "description": "Plantilla para modelos de entidades de dominio (business/domain/[entity]/model.rs)"
    },
    "Business Domain Use Cases": {
        "prefix": "business-use-cases",
        "body": [
            "use std::sync::Arc;",
            "",
            "use async_trait::async_trait;",
            "",
            "use uuid::Uuid;",
            "",
            "use super::{",
            "    errors::${1:Entity}Error,",
            "    model::${1:Entity},",
            "    repository::${1:Entity}Repository,",
            "    value_objets::{${2:Value1}, ${3:Value2}},",
            "};",
            "",
            "#[async_trait]",
            "pub trait ${1:Entity}UseCases: Send + Sync {",
            "    async fn delete_${1:entity}(&self, ${1:entity}_id: &Uuid) -> Result<(), ${1:Entity}Error>;",
            "    async fn get_${1:entity}s(&self) -> Result<Vec<${1:Entity}>, ${1:Entity}Error>;",
            "    async fn register_${1:entity}(&self, request: String, ${2:value1}: ${2:Value1}, ${3:value2}: ${3:Value2}) -> Result<${1:Entity}, ${1:Entity}Error>;",
            "    async fn update_${1:entity}(&self, ${1:entity}: &${1:Entity}) -> Result<(), ${1:Entity}Error>;",
            "}",
            "",
            "pub struct ${1:Entity}UseCasesImpl {",
            "    pub repository: Arc<dyn ${1:Entity}Repository + Send + Sync>,",
            "}"
        ],
        "description": "Plantilla para un caso de uso genérico (business/domain/[entity]/use_cases.rs)."
    },
    "Business Domain Errors": {
        "prefix": "business-domain-errors",
        "body": [
            "use thiserror::Error;",
            "",
            "use crate::domain::errors::RepositoryError;",
            "",
            "#[derive(Debug, Error)]",
            "pub enum ${1:Entity}Error {",
            "    #[error(\"${1} not found: {0}\")]",
            "    NotFound(String),",
            "",
            "    #[error(\"${1} already exists: {0}\")]",
            "    Duplicate${1}(String),",
            "",
            "    #[error(\"Repository error: {0}\")]",
            "    RepositoryError(String),",
            "",
            "    #[error(\"Validation error: {0}\")]",
            "    Validation(String),",
            "",
            "    #[error(\"Unknown error occurred: {0}\")]",
            "    Unknown(#[from] anyhow::Error),",
            "}",
            "",
            "/**",
            " * Matches the RepositoryError to the ${1}Error.",
            " */",
            "impl From<RepositoryError> for ${1}Error {",
            "    fn from(err: RepositoryError) -> Self {",
            "        match err {",
            "            RepositoryError::NotFound(msg) => Self::NotFound(msg),",
            "            RepositoryError::Persistence(msg) => Self::RepositoryError(msg),",
            "            RepositoryError::DatabaseError(msg) => Self::RepositoryError(msg),",
            "            RepositoryError::DuplicateEntity(entity) => Self::Duplicate${1}(entity),",
            "        }",
            "    }",
            "}"
        ],
        "description": "Plantilla de error para el modelo de dominio (business/domain/[entity]/errors.rs)"
    },
    "Business Domain Repository": {
        "prefix": "business-domain-repository",
        "body": [
            "use async_trait::async_trait;",
            "use uuid::Uuid;",
            "",
            "use crate::domain::errors::RepositoryError;",
            "",
            "use super::model::${1:Entity};",
            "",
            "#[async_trait]",
            "pub trait ${1:Entity}Repository: Send + Sync {",
            "    async fn save(&self, ${1:entity}: &${1:Entity}) -> Result<(), RepositoryError>;",
            "    async fn find_all(&self) -> Result<Vec<${1:Entity}>, RepositoryError>;",
            "    async fn find_by_id(&self, id: &Uuid) -> Result<${1:Entity}, RepositoryError>;",
            "    async fn delete(&self, id: &Uuid) -> Result<(), RepositoryError>;",
            "    async fn update(&self, ${1:entity}: &${1:Entity}) -> Result<(), RepositoryError>;",
            "}"
        ],
        "description": "Plantilla para un repositorio del modelo (business/domain/[entity]/repository.rs)"
    },
    /**
    * Presentation Layer Snippets
    */
    "Presentation Rest Api Router Entity Controller": {
        "prefix": "rest-api-router-entity-controller",
        "body": [
            "pub mod ${1:module_name} {",
            "\tpub mod controller;",
            "\tpub mod dto;",
            "}"
        ],
        "description": "Crea un submódulo de router con controller y dto (presentation/rest-api/src/router/[entity]/controller.rs)"
    },
    /**
    * Infrastructure Layer Snippets
    */
    "Infrastructure Lib Persistance": {
        "prefix": "lib-persistence",
        "body": [
            "pub mod ${1:module_name} {",
            "\tpub mod data_model;",
            "\tpub mod repository;",
            "}"
        ],
        "description": "Crea un submódulo dentro de un módulo de persistencia con data_model y repository (infrastructure/persistance -> pub mod [postgres|sqlite|redis|...])"
    },
}